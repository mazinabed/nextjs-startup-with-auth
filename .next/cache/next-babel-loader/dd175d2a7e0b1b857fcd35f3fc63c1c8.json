{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport db from '../../../models';\nimport jwt from 'jsonwebtoken';\nconst env = \"development\" || 'development';\nexport default async function (req, res) {\n  const user = await db.user.findOne({\n    where: {\n      email: req.body.email\n    }\n  });\n  const result = await bcrypt.compare(req.body.password, user.password);\n\n  if (result) {\n    const token = jwt.sign({\n      id: user.id,\n      email: user.email\n    }, process.env.secretkey);\n    res.json({\n      id: user.id,\n      email: user.emai,\n      token\n    });\n  } else {\n    res.end(\"Login failed\");\n  }\n}","map":{"version":3,"sources":["/Users/mazinabed/Desktop/nextjs-startup-with-auth/src/pages/api/signin.js"],"names":["bcrypt","db","jwt","env","req","res","user","findOne","where","email","body","result","compare","password","token","sign","id","process","secretkey","json","emai","end"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,EAAP,MAAe,iBAAf;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,MAAMC,GAAG,GAAG,iBAAwB,aAApC;AAIA,eAAe,gBAAgBC,GAAhB,EAAqBC,GAArB,EAAyB;AAGxC,QAAMC,IAAI,GAAG,MAAML,EAAE,CAACK,IAAH,CAAQC,OAAR,CAAgB;AAC/BC,IAAAA,KAAK,EAAC;AACFC,MAAAA,KAAK,EAAEL,GAAG,CAACM,IAAJ,CAASD;AADd;AADyB,GAAhB,CAAnB;AAMA,QAAME,MAAM,GAAG,MAAMX,MAAM,CAACY,OAAP,CAAeR,GAAG,CAACM,IAAJ,CAASG,QAAxB,EAAkCP,IAAI,CAACO,QAAvC,CAArB;;AACA,MAAIF,MAAJ,EAAY;AAER,UAAMG,KAAK,GAAGZ,GAAG,CAACa,IAAJ,CAAS;AAACC,MAAAA,EAAE,EAAEV,IAAI,CAACU,EAAV;AAAcP,MAAAA,KAAK,EAAEH,IAAI,CAACG;AAA1B,KAAT,EAA2CQ,OAAO,CAACd,GAAR,CAAYe,SAAvD,CAAd;AACAb,IAAAA,GAAG,CAACc,IAAJ,CAAS;AACLH,MAAAA,EAAE,EAAEV,IAAI,CAACU,EADJ;AAELP,MAAAA,KAAK,EAAEH,IAAI,CAACc,IAFP;AAILN,MAAAA;AAJK,KAAT;AAKH,GARD,MAQK;AACDT,IAAAA,GAAG,CAACgB,GAAJ,CAAQ,cAAR;AACH;AAIA","sourcesContent":["import bcrypt from 'bcrypt'\nimport db from '../../../models'\nimport jwt from 'jsonwebtoken'\nconst env = process.env.NODE_ENV || 'development';\n\n\n\nexport default async function (req, res){\n\n\nconst user = await db.user.findOne({\n    where:{\n        email: req.body.email,\n    }\n});\n\nconst result = await bcrypt.compare(req.body.password, user.password)\nif (result) {\n\n    const token = jwt.sign({id: user.id, email: user.email}, process.env.secretkey)\n    res.json({\n        id: user.id, \n        email: user.emai,\n        \n        token})\n}else{\n    res.end(\"Login failed\")\n}\n\n\n\n}"]},"metadata":{},"sourceType":"module"}